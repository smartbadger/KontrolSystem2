use { Vessel, Targetable, ModuleDockingNode, DockingState } from ksp::vessel
use { DEBUG } from ksp::debug
use { CONSOLE, RED, BLUE, YELLOW } from ksp::console
use { sleep, wait_until, current_time } from ksp::game
use { global_look_dir_up, vec3 } from ksp::math 
use { ship_is_facing } from std::utils
use { pid_loop } from ksp::control
use { clamp } from core::math
use { global_ship_is_facing } from std::utils
use { control_steering } from std::control::steering


pub fn dock_vessel(vessel : Vessel, target : Targetable) -> Result<Unit> = {
    CONSOLE.clear()

    const (vessel_port, target_port) = choose_docking_nodes(vessel, target)?
        
    DEBUG.add_vector(fn() -> vessel_port.part.global_position, fn() -> vessel_port.part.global_rotation.vector * 10, RED, "", 1)
    DEBUG.add_vector(fn() -> vessel_port.part.global_position, fn() -> vessel_port.part.global_rotation.up_vector * 10, BLUE, "", 1)

    DEBUG.add_vector(fn() -> target_port.part.global_position, fn() -> target_port.part.global_rotation.vector * 10, RED, "", 1)
    DEBUG.add_vector(fn() -> target_port.part.global_position, fn() -> target_port.part.global_rotation.up_vector * 10, BLUE, "", 1)


    vessel.actions.sas = false
    vessel.actions.rcs = false

    const steering_control = control_steering(vessel)
    const target_dir = global_look_dir_up(-target_port.part.global_rotation.vector, target_port.part.global_rotation.up_vector)

    steering_control.set_global_direction(target_dir)

    wait_until(fn() -> global_ship_is_facing(vessel, target_dir.vector, 5, 0.5))

    dock_move_correct_side(vessel, target_port)?

    dock_approach(vessel, target_port)?

    steering_control.release()

    vessel.actions.sas = true
    vessel.actions.rcs = false
}

pub sync fn choose_docking_nodes(vessel : Vessel, target : Targetable) -> Result<(vessel_port : ModuleDockingNode, target_port : ModuleDockingNode)> = {
    const target_ports = if(Some(docking_node) = target.docking_node) {
        [docking_node]
    } else {
        const target_vessel = target.vessel.ok_or("Can only dock to another vessel")?
        target_vessel.docking_nodes.filter(fn(part) -> part.docking_state == DockingState.Ready)
    }
    const vessel_ports = vessel.docking_nodes.filter(fn(part) -> part.docking_state == DockingState.Ready)
 
    for(port in vessel_ports) {
        const maybe_target_port = target_ports.find(fn(target_port) -> has_matching_types(target_port.node_types, port.node_types))
        
        if(maybe_target_port.defined) {
            return Ok((vessel_port: port, target_port: maybe_target_port.value))
        }
    }
    
    Err("No matching docking ports found")
}

sync fn has_matching_types(target_types: string[], source_types: string[]) -> bool = 
    target_types.exists(fn(target_type) -> source_types.exists(fn(source_type) -> target_type == source_type))

pub fn dock_move_correct_side(vessel : Vessel, target_port : ModuleDockingNode) -> Result<Unit> = {
    CONSOLE.print_line("=== dock_move_correct_side ===")
    const console_row = CONSOLE.cursor_row
    CONSOLE.move_cursor(console_row + 12, 0)

    vessel.actions.rcs = true

    const dock_x = pid_loop(0.8, 0, 0.4, -1, 1)
    const dock_y = pid_loop(0.8, 0, 0.4, -1, 1)
    const dock_z = pid_loop(0.8, 0, 0.4, -1, 1)
    
    const rcs_manager = vessel.manage_rcs_translate(fn(delta_t) -> {
        const vel_diff = vessel.orbital_velocity - target_port.part.vessel.orbital_velocity
        const target_pos = target_port.part.position - vessel.position
        const x = target_pos * vessel.facing.right_vector
        const y = -target_pos * vessel.facing.up_vector
        const z = target_pos * vessel.facing.vector
        const vx = -vel_diff * vessel.facing.right_vector
        const vy = vel_diff * vessel.facing.up_vector
        const vz = -vel_diff * vessel.facing.vector
        const tx = -clamp(x / 20, -5, 5)
        const ty = -clamp(y / 20, -5, 5)
        const tz = -clamp((z - 100) / 20, -5, 5)

        CONSOLE.move_cursor(console_row + 9, 0)
        CONSOLE.print_at(console_row    , 0, $"X: {x.to_fixed(3)}")
        CONSOLE.print_at(console_row + 1, 0, $"Y: {y.to_fixed(3)}")
        CONSOLE.print_at(console_row + 2, 0, $"Z: {z.to_fixed(3)}")
        CONSOLE.print_at(console_row + 3, 0, $"VX: {vx.to_fixed(3)}")
        CONSOLE.print_at(console_row + 4, 0, $"VY: {vy.to_fixed(3)}")
        CONSOLE.print_at(console_row + 5, 0, $"VZ: {vz.to_fixed(3)}")
        CONSOLE.print_at(console_row + 6, 0, $"TX: {tx.to_fixed(3)}")
        CONSOLE.print_at(console_row + 7, 0, $"TY: {ty.to_fixed(3)}")
        CONSOLE.print_at(console_row + 8, 0, $"TZ: {tz.to_fixed(3)}")
        
        const dX = dock_x.update_delta(delta_t, tx - vx)
        const dY = dock_y.update_delta(delta_t, vy - ty)
        const dZ = dock_z.update_delta(delta_t, tz - vz)

        CONSOLE.print_at(console_row + 9, 0, $"dX: {dX.to_fixed(3)}")
        CONSOLE.print_at(console_row + 10, 0, $"dY: {dY.to_fixed(3)}")
        CONSOLE.print_at(console_row + 11, 0, $"dZ: {dZ.to_fixed(3)}")

        vec3(dX, dY, dZ)
    })

    wait_until(fn() -> {
        const target_pos = target_port.part.position - vessel.position
        const x = target_pos * vessel.facing.right_vector
        const y = -target_pos * vessel.facing.up_vector
        const z = target_pos * vessel.facing.vector

        vec3(x, y, z - 100).magnitude < 5
    })
    
    rcs_manager.release()
}

pub fn dock_approach(vessel : Vessel, target_port : ModuleDockingNode) -> Result<Unit> = {
    CONSOLE.print_line("=== dock_approach ===")
    const console_row = CONSOLE.cursor_row
    CONSOLE.move_cursor(console_row + 1, 0)

    vessel.actions.rcs = true

    const dock_x = pid_loop(0.4, 0.1, 0.4, -1, 1)
    const dock_y = pid_loop(0.4, 0.1, 0.4, -1, 1)
    const dock_z = pid_loop(0.8, 0, 0.4, -1, 1)
    
    const rcs_manager = vessel.manage_rcs_translate(fn(delta_t) -> {
        const vel_diff = vessel.orbital_velocity - target_port.part.vessel.orbital_velocity
        const target_pos = target_port.part.position - vessel.position
        const x = target_pos * vessel.facing.right_vector
        const y = -target_pos * vessel.facing.up_vector
        const z = target_pos * vessel.facing.vector
        const vx = -vel_diff * vessel.facing.right_vector
        const vy = vel_diff * vessel.facing.up_vector
        const vz = -vel_diff * vessel.facing.vector
        const tz = if(z > 40) -2.0 else if(z > 20) -1.0 else -0.2

        CONSOLE.print_at(console_row    , 0, $"X: {x.to_fixed(3)}")
        CONSOLE.print_at(console_row + 1, 0, $"Y: {y.to_fixed(3)}")
        CONSOLE.print_at(console_row + 2, 0, $"Z: {z.to_fixed(3)}")
        CONSOLE.print_at(console_row + 3, 0, $"VX: {vx.to_fixed(3)}")
        CONSOLE.print_at(console_row + 4, 0, $"VY: {vy.to_fixed(3)}")
        CONSOLE.print_at(console_row + 5, 0, $"VZ: {vz.to_fixed(3)}")
        CONSOLE.print_at(console_row + 6, 0, $"State: {target_port.docking_state.to_string()}")
        CONSOLE.print_at(console_row + 7, 0, $"TZ: {tz.to_fixed(3)}")

        const dX = dock_x.update_delta(delta_t, -x)
        const dY = dock_y.update_delta(delta_t, y)
        const dZ = dock_z.update_delta(delta_t, tz - vz)

        CONSOLE.print_at(console_row + 8, 0, $"dX: {dX.to_fixed(3)}")
        CONSOLE.print_at(console_row + 9, 0, $"dY: {dY.to_fixed(3)}")
        CONSOLE.print_at(console_row + 10, 0, $"dZ: {dZ.to_fixed(3)}")
        
        vec3(dX, dY, dZ)
    })
    
    wait_until(fn() -> target_port.docking_state != DockingState.Ready)
    
    rcs_manager.release()
}
