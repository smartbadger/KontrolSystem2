use * from core::testing
use { TestStruct2 } from lib_test::structs

test sync fn test_basic_array() -> Unit = {
    let bool_arr : bool[] = [ true, false, true ]
    let int_arr : int[] = [ 0, 11, 22, 33, 44 ]
    let float_arr = [ 1.1, 2.2, 3.3, 4.4, 5.5, 6.6 ]

    assert_int(3, bool_arr.length)
    assert_int(5, int_arr.length)
    assert_int(5, func_with_array(int_arr))
    assert_int(6, float_arr.length)
    assert_true(bool_arr[0])
    assert_false(bool_arr[1])
    assert_int(22, int_arr[2])
    assert_float(4.4, float_arr[3])
}

test sync fn test_complexer_array() -> Unit = {
    let tuple_arr = [ (0, 1.1), (2, 3.3), (4, 5.5) ]

    assert_int(3, tuple_arr.length)
    assert_int(2, tuple_arr[1]._1)
    assert_float(5.5, tuple_arr[2]._2)
}

test sync fn test_empty_infer() -> Unit = {
    let int_arr : int[] = []

    assert_int(0, int_arr.length)
    assert_int(0, func_with_array([]))
}

test sync fn test_empty_direct() -> Unit = {
    let int_arr = <int>[]

    assert_int(0, int_arr.length)
    assert_int(0, func_with_array(<int>[]))
}

sync fn func_with_array(arr : int[]) -> int = arr.length

test sync fn test_array_map() -> Unit = {
    const int_arr = [ 0, 11, 22, 33, 44 ]
    const mapped_arr = int_arr.map(fn(i) -> 0.1 * i)

    assert_int(5, mapped_arr.length)
    assert_float(0.0, mapped_arr[0])
    assert_float(1.1, mapped_arr[1])
    assert_float(2.2, mapped_arr[2])
    assert_float(3.3, mapped_arr[3])
    assert_float(4.4, mapped_arr[4])
}

test sync fn test_array_map_with_index() -> Unit = {
    const int_arr = [ 3, 5, 7, 11, 13, 17 ]
    const mapped_arr = int_arr.map_with_index(fn(i, idx) -> 0.1 * i + idx)

    assert_int(6, mapped_arr.length)
    assert_float(0.3, mapped_arr[0])
    assert_float(1.5, mapped_arr[1])
    assert_float(2.7, mapped_arr[2])
    assert_float(4.1, mapped_arr[3])
    assert_float(5.3, mapped_arr[4])
    assert_float(6.7, mapped_arr[5])
}

test sync fn test_array_set() -> Unit = {
    let int_arr = [ 3, 5, 7, 11, 13, 17 ]

    assert_int(6, int_arr.length)
    assert_int(3, int_arr[0])
    assert_int(5, int_arr[1])
    assert_int(7, int_arr[2])
    assert_int(11, int_arr[3])
    assert_int(13, int_arr[4])
    assert_int(17, int_arr[5])

    int_arr[3] = 1234

    assert_int(6, int_arr.length)
    assert_int(3, int_arr[0])
    assert_int(5, int_arr[1])
    assert_int(7, int_arr[2])
    assert_int(1234, int_arr[3])
    assert_int(13, int_arr[4])
    assert_int(17, int_arr[5])

    assert_string("[3, 5, 7, 1234, 13, 17]", int_arr.to_string())
}

test sync fn test_array_builder() -> Unit = {
    let builder : ArrayBuilder<(i : int, f : float)> = ArrayBuilder(100)

    assert_int(0, builder.length)
    for(idx in 0..100) {
        builder.append((i : idx, f : 1.1 * idx))
    }
    assert_int(100, builder.length)
    for(idx in 100..200) {
        builder += (i : idx, f : 1.1 * idx)
    }
    assert_int(200, builder.length)

    const arr = builder.result()

    for(idx in 0..200) {
        assert_int(idx, arr[idx].i)
        assert_float(idx * 1.1, arr[idx].f)
    }
}

test sync fn test_array_find() -> Unit = {
    const arr = [ "One", "Two", "three" ]
    
    assert_none(arr.find(fn(item) -> false))
    assert_some("Two", arr.find(fn(item) -> item.to_lower() == "two"))
}

test sync fn test_array_reverse() -> Unit = {
    let int_arr : int[] = [ 0, 11, 22, 33, 44 ]
    let reverse_arr = int_arr.reverse()
    
    assert_int(5, reverse_arr.length)
    assert_int(44, reverse_arr[0])
    assert_int(22, reverse_arr[2])
}

test sync fn test_array_append() -> Unit = {
    const int_arr1 : int[] = [ 0, 11, 22, 33, 44 ]
    const int_arr2 = int_arr1 + 55

    assert_int(5, int_arr1.length)
    assert_int(6, int_arr2.length)
    
    for(i in 0...4) {
      assert_int(i + 10 * i, int_arr1[i])
      assert_int(i + 10 * i, int_arr2[i])
    }
    assert_int(55, int_arr2[5])
}

test sync fn test_array_append_mut() -> Unit = {
    let int_arr : int[] = []

    for(i in 0...4) {
      int_arr += i + 10 * i
    }

    assert_int(5, int_arr.length)
    
    for(i in 0...4) {
      assert_int(i + 10 * i, int_arr[i])
    }
}

test sync fn test_array_concat() -> Unit = {
    const int_arr1 : int[] = [ 0, 11, 22, 33, 44 ]
    const int_arr2 : int[] = [ 55, 66, 77, 88 ]
    const int_arr3 = int_arr1 + int_arr2

    assert_int(5, int_arr1.length)
    assert_int(4, int_arr2.length)
    assert_int(9, int_arr3.length)
    
    for(i in 0...4) {
      assert_int(i + 10 * i, int_arr1[i])
    }
    for(i in 5...8) {
      assert_int(i + 10 * i, int_arr2[i - 5])
      assert_int(i + 10 * i, int_arr3[i])
    }
}

test sync fn test_array_concat_mut() -> Unit = {
    let int_arr : int[] = []

    for(i in 0...4) {
      int_arr += [i, i * 10 + i]
    }
    
    assert_int(10, int_arr.length)
    
    for(i in 0...4) {
      assert_int(i, int_arr[2 * i])
      assert_int(i + 10 * i, int_arr[2 * i + 1])
    }
}

test sync fn test_array_sort() -> Unit = {
    const int_arr = [ 17, 11, 3, 7, 5, 13 ]
    const str_arr = [ "bla", "abc", "zuzu", "test" ]

    const sorted_int_arr = int_arr.sort()
    const sorted_str_arr = str_arr.sort()
    
    assert_string("[3, 5, 7, 11, 13, 17]", sorted_int_arr.to_string())
    assert_string("[abc, bla, test, zuzu]", sorted_str_arr.to_string())
}

test sync fn test_array_reduce() -> Unit = {
    const int_arr = [ 17, 11, 3, 7, 5, 13 ]
    
    const sum = int_arr.reduce(0, fn(sum : int, item: int) -> sum + item)
    
    assert_int(56, sum)
}

test sync fn test_array_slice() -> Unit = {
    const int_arr : int[] = [ 0, 11, 22, 33, 44, 55, 66, 77, 88 ]

    const slice1 = int_arr.slice(3)
    const slice2 = int_arr.slice(4, 7)
    
    assert_string("[0, 11, 22, 33, 44, 55, 66, 77, 88]", int_arr.to_string())
    assert_string("[33, 44, 55, 66, 77, 88]", slice1.to_string())
    assert_string("[44, 55, 66]", slice2.to_string())
}

test sync fn test_array_sort_by() -> Unit = {
    const struct_arr : TestStruct2[] = [
        TestStruct2(1),
        TestStruct2(-6),
        TestStruct2(2),
        TestStruct2(10),
        TestStruct2(-4),
    ]
    const sorted = struct_arr.sort_by(fn(t) -> t.field1)
    
    assert_string("[2, 18, 4, 20, 12]", struct_arr.map(fn(t) -> t.field1).to_string())
    assert_string("[2, 4, 12, 18, 20]", sorted.map(fn(t) -> t.field1).to_string())
}

test sync fn test_array_sort_with() -> Unit = {
    const struct_arr : TestStruct2[] = [
        TestStruct2(1),
        TestStruct2(-6),
        TestStruct2(2),
        TestStruct2(10),
        TestStruct2(-4),
    ]
    const sorted = struct_arr.sort_with(fn(a, b) -> if(a.field1 > b.field1) -1 else if(a.field1 == a.field2) 0 else 1)
    
    assert_string("[2, 18, 4, 20, 12]", struct_arr.map(fn(t) -> t.field1).to_string())
    assert_string("[20, 18, 12, 4, 2]", sorted.map(fn(t) -> t.field1).to_string())    
}

test sync fn test_array_flat_map() -> Unit = {
    const int_arr = [ 0, 11, 22, 33, 44 ]
    const mapped_arr = int_arr.flat_map(fn(i) -> [0.1 * i, 0.01 * i])

    assert_int(10, mapped_arr.length)
    assert_float(0.0, mapped_arr[0])
    assert_float(0.0, mapped_arr[1])
    assert_float(1.1, mapped_arr[2])
    assert_float(0.11, mapped_arr[3])
    assert_float(2.2, mapped_arr[4])
    assert_float(0.22, mapped_arr[5])
    assert_float(3.3, mapped_arr[6])
    assert_float(0.33, mapped_arr[7])
    assert_float(4.4, mapped_arr[8])
    assert_float(0.44, mapped_arr[9])
}

test sync fn test_array_filter_map() -> Unit = {
    const int_arr = [ 0, 11, 22, 33, 44 ]
    const mapped_arr = int_arr.filter_map(fn(i) -> if(i > 15) 0.1 * i)

    assert_int(3, mapped_arr.length)
    assert_float(2.2, mapped_arr[0])
    assert_float(3.3, mapped_arr[1])
    assert_float(4.4, mapped_arr[2])
}

test sync fn test_array_assign_to_mutable() -> Unit = {
    const initial_arr = [ 0, 11, 22, 33, 44 ]
    let arr = initial_arr
    
    arr[2] = 5

    assert_int(5, arr[2])
    
    // value of the read-only array should remain unchanged
    assert_int(22, initial_arr[2])
}

test sync fn test_array_assign_to_mutable_nested() -> Unit = {
    const initial_arr = [ [0, 11, 22, 33, 44], [55, 66, 77, 88, 99] ]
    let arr = initial_arr
    
    arr[0][2] = 5
    arr[1][3] = 10
    
    assert_int(5, arr[0][2])
    assert_int(10, arr[1][3])

    // value of the read-only array should remain unchanged
    assert_int(22, initial_arr[0][2])
    assert_int(88, initial_arr[1][3])
}

test sync fn test_small_matrix_init() -> Unit = {
    let line: int[] = []
    let matrix: int[][] = []
    for (i in 0..6) {line += [0]}
    for (i in 0..6) {matrix += [line]}

    for (i in 0..6) {matrix[i][i] = 1}
    
    for(i in 0..6) {
        for(j in 0..6) {
            if(i == j)
                assert_int(1, matrix[i][j])
            else
                assert_int(0, matrix[i][j])
        }
    }
}